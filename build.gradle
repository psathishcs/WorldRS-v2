/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.2.RELEASE")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'

jar {
    baseName = 'worldrs-v2'
    version =  '0.1.0'
}
// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

group = 'world'
sourceCompatibility = 1.8
targetCompatibility = 1.8



// In this section you declare the dependencies for your production and test code
dependencies {
	compile 'org.slf4j:slf4j-api:1.7.21'
	compile("org.springframework.boot:spring-boot-starter-web")
 	compile("org.springframework.boot:spring-boot-starter-tomcat")
   	compile("org.springframework.boot:spring-boot-starter-actuator")
  	compile("org.springframework.boot:spring-boot-starter-jdbc")
   	compile("org.springframework.boot:spring-boot-starter-data-jpa")
	//compile("org.springframework.cloud:spring-cloud-starter-config")
	compile("org.springframework.cloud:spring-cloud-starter-eureka")
	compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.41'
	testCompile("org.springframework.boot:spring-boot-starter-test")
	testCompile('org.springframework.cloud:spring-cloud-starter-eureka-server')
	testCompile 'junit:junit:4.12'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.SR7"
	}
}

task buildDocker(type: Docker, dependsOn: build) {
  push = true
  applicationName = jar.baseName
  dockerfile = file('src/main/docker/Dockerfile')
  doFirst {
    copy {
      from jar
      into stageDir
    }
  }
}